/*
 * TunesController.java
 *
 * Created on 16. November 2005, 08:11
 */
/*	Copyright (c) 2005 - 2007 CoreCode
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitationthe rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package tunescontroller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.ButtonGroup;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;

public class TunesController extends javax.swing.JDialog implements ActionListener {
    public static final int RET_CANCEL = 0;
    public static final int RET_OK = 1;
    
    public TunesController(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        if (!connect()) {         
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    doClose(RET_CANCEL);
                    new ConnectDialog(new javax.swing.JFrame(), true).setVisible(true);
                }
            });
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Erzeugter Quelltext ">//GEN-BEGIN:initComponents
    private void initComponents() {
        itunesButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();
        ratingButton = new javax.swing.JButton();
        playlistsButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        playpauseButton = new javax.swing.JButton();
        volumeButton = new javax.swing.JButton();
        infoTextArea = new javax.swing.JTextArea();

        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        itunesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/iTunes.png")));
        itunesButton.setToolTipText("Quit/Start iTunes");
        itunesButton.setMaximumSize(new java.awt.Dimension(32, 32));
        itunesButton.setMinimumSize(new java.awt.Dimension(32, 32));
        itunesButton.setPreferredSize(new java.awt.Dimension(32, 32));
        itunesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itunesAction(evt);
            }
        });

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/view-refresh.png")));
        refreshButton.setToolTipText("Refresh");
        refreshButton.setMaximumSize(new java.awt.Dimension(32, 32));
        refreshButton.setMinimumSize(new java.awt.Dimension(32, 32));
        refreshButton.setPreferredSize(new java.awt.Dimension(32, 32));
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshAction(evt);
            }
        });

        settingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/applications-system.png")));
        settingsButton.setToolTipText("Settings");
        settingsButton.setMaximumSize(new java.awt.Dimension(32, 32));
        settingsButton.setMinimumSize(new java.awt.Dimension(32, 32));
        settingsButton.setPreferredSize(new java.awt.Dimension(32, 32));
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsAction(evt);
            }
        });

        previousButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/media-skip-backward.png")));
        previousButton.setToolTipText("Previous Title");
        previousButton.setMaximumSize(new java.awt.Dimension(32, 32));
        previousButton.setMinimumSize(new java.awt.Dimension(32, 32));
        previousButton.setPreferredSize(new java.awt.Dimension(32, 32));
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevAction(evt);
            }
        });

        ratingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/emblem-favorite.png")));
        ratingButton.setToolTipText("Rating");
        ratingButton.setMaximumSize(new java.awt.Dimension(32, 32));
        ratingButton.setMinimumSize(new java.awt.Dimension(32, 32));
        ratingButton.setPreferredSize(new java.awt.Dimension(32, 32));
        ratingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratingAction(evt);
            }
        });

        playlistsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/audio-x-generic.png")));
        playlistsButton.setToolTipText("Playlists");
        playlistsButton.setMaximumSize(new java.awt.Dimension(32, 32));
        playlistsButton.setMinimumSize(new java.awt.Dimension(32, 32));
        playlistsButton.setPreferredSize(new java.awt.Dimension(32, 32));
        playlistsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistAction(evt);
            }
        });

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/media-skip-forward.png")));
        nextButton.setToolTipText("Next Title");
        nextButton.setMaximumSize(new java.awt.Dimension(32, 32));
        nextButton.setMinimumSize(new java.awt.Dimension(32, 32));
        nextButton.setPreferredSize(new java.awt.Dimension(32, 32));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextAction(evt);
            }
        });

        playpauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/media-playback-pause.png")));
        playpauseButton.setToolTipText("Toggle Play/Pause");
        playpauseButton.setMaximumSize(new java.awt.Dimension(32, 32));
        playpauseButton.setMinimumSize(new java.awt.Dimension(32, 32));
        playpauseButton.setPreferredSize(new java.awt.Dimension(32, 32));
        playpauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playpauseAction(evt);
            }
        });

        volumeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/audio-volume-high.png")));
        volumeButton.setToolTipText("Volume");
        volumeButton.setMaximumSize(new java.awt.Dimension(32, 32));
        volumeButton.setMinimumSize(new java.awt.Dimension(32, 32));
        volumeButton.setPreferredSize(new java.awt.Dimension(32, 32));
        volumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeAction(evt);
            }
        });

        infoTextArea.setColumns(20);
        infoTextArea.setRows(5);
        infoTextArea.setAutoscrolls(false);
        infoTextArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(infoTextArea, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(previousButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(playpauseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nextButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(16, 16, 16)
                        .add(ratingButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(playlistsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(settingsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(volumeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(refreshButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(itunesButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(previousButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(playpauseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(itunesButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(refreshButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(nextButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(playlistsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(settingsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(volumeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ratingButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(infoTextArea, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playlistAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playlistAction
        JPopupMenu popup = new JPopupMenu();
        JRadioButtonMenuItem menuItem;
        ButtonGroup group = new ButtonGroup();
           
        for(int i = 0; i < playlists.length; i++) {
            menuItem = new JRadioButtonMenuItem((String)playlists[i]);
            menuItem.addActionListener(this);
            popup.add(menuItem);
            if (((String)playlists[i]).equals(currentPlaylist))
                menuItem.setSelected(true);
            group.add(menuItem);
        }
        
        popup.show(playlistsButton, 0, 0);
    
    }//GEN-LAST:event_playlistAction

    private void settingsAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsAction
        JPopupMenu popup = new JPopupMenu();
        JMenuItem menuItem;
        
        if (currentPlaylist.equalsIgnoreCase("Party-Jukebox"))
        {
           menuItem = new JMenuItem("Settings disabled in Party-Jukebox");
           menuItem.setEnabled(false);
           popup.add(menuItem);
           popup.show(settingsButton, 0, 0);
           return;
        }
        
        String[] titles  = new String[] {"Repeat Off", "Repeat One", "Repeat All", "", "Shuffle Off", "Shuffle On"};
        ButtonGroup group = new ButtonGroup();
        
        menuItem = new JRadioButtonMenuItem("Repeat Off");
        menuItem.addActionListener(this);
        if (repeat == 0)
             menuItem.setSelected(true);       
        group.add(menuItem);
        popup.add(menuItem);
        
        menuItem = new JRadioButtonMenuItem("Repeat One");
        menuItem.addActionListener(this);
        if (repeat == 2)
             menuItem.setSelected(true);
        group.add(menuItem);
        popup.add(menuItem);
        
        menuItem = new JRadioButtonMenuItem("Repeat All");
        menuItem.addActionListener(this);
        if (repeat == 1)
             menuItem.setSelected(true);
        group.add(menuItem);
        popup.add(menuItem);
        popup.addSeparator();

        group = new ButtonGroup();
        menuItem = new JRadioButtonMenuItem("Shuffle Off");
        menuItem.addActionListener(this);
        if (shuffle == 0)
             menuItem.setSelected(true);       
        group.add(menuItem);
        popup.add(menuItem);
        
        menuItem = new JRadioButtonMenuItem("Shuffle On");
        menuItem.addActionListener(this);
        if (shuffle == 1)
             menuItem.setSelected(true); 
        group.add(menuItem);
        popup.add(menuItem);
        
        popup.show(settingsButton, 0, 0);
    }//GEN-LAST:event_settingsAction

    private void volumeAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeAction
        JPopupMenu popup = new JPopupMenu();
        JRadioButtonMenuItem menuItem;
        ButtonGroup group = new ButtonGroup();
        
        String[] titles  = new String[] {"0%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%"};
        
        for(int i = 0; i < titles.length; i++) {
            menuItem = new JRadioButtonMenuItem(titles[i]);
            menuItem.addActionListener(this);
            popup.add(menuItem);
            if (volume / 10 == i)
                menuItem.setSelected(true);
            group.add(menuItem);
        }
        
        popup.show(volumeButton, 0, 0);
    }//GEN-LAST:event_volumeAction
    
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        
        if (cmd.equals("None"))
            send((char)5, (char)0);
        else if (cmd.equals("\u00BD"))
            send((char)5, (char)10);
        else if (cmd.equals("\u2605"))
            send((char)5, (char)20);
        else if (cmd.equals("\u2605\u00BD"))
            send((char)5, (char)30);
        else if (cmd.equals("\u2605\u2605"))
            send((char)5, (char)40);
        else if (cmd.equals("\u2605\u2605\u00BD"))
            send((char)5, (char)50);
        else if (cmd.equals("\u2605\u2605\u2605"))
            send((char)5, (char)60);
        else if (cmd.equals("\u2605\u2605\u2605\u00BD"))
            send((char)5, (char)70);
        else if (cmd.equals("\u2605\u2605\u2605\u2605"))
            send((char)5, (char)80);
        else if (cmd.equals("\u2605\u2605\u2605\u2605\u00BD"))
            send((char)5, (char)90);
        else if (cmd.equals("\u2605\u2605\u2605\u2605\u2605"))
            send((char)5, (char)100);
        else if (cmd.equals("0%"))
        {    send((char)9, (char)0); volume = 0;    }
        else if (cmd.equals("10%"))  
        {    send((char)9, (char)10); volume = 10;    }           
        else if (cmd.equals("20%")) 
        {    send((char)9, (char)20); volume = 20;    }
        else if (cmd.equals("30%"))  
        {    send((char)9, (char)30); volume = 30;    }
        else if (cmd.equals("40%"))  
        {    send((char)9, (char)40); volume = 40;    }
        else if (cmd.equals("50%"))  
        {    send((char)9, (char)50); volume = 50;    }
        else if (cmd.equals("60%"))  
        {    send((char)9, (char)60); volume = 60;    }
        else if (cmd.equals("70%"))  
        {    send((char)9, (char)70); volume = 70;    }
        else if (cmd.equals("80%"))  
        {    send((char)9, (char)80); volume = 80;    }
        else if (cmd.equals("90%"))  
        {    send((char)9, (char)90); volume = 90;    }
        else if (cmd.equals("100%")) 
        {    send((char)9, (char)100); volume = 100;    }
        else if (cmd.equals("Repeat Off")) 
        {    send((char)7, (char)0); repeat = 0;    }            
        else if (cmd.equals("Repeat One")) 
        {    send((char)7, (char)2); repeat = 2;    }            
        else if (cmd.equals("Repeat All")) 
        {    send((char)7, (char)1); repeat = 1;    }            
        else if (cmd.equals("Shuffle Off")) 
        {    send((char)8, (char)0); shuffle = 0;    }            
        else if (cmd.equals("Shuffle On"))             
        {    send((char)8, (char)1); shuffle = 1;    }   
        else
        {
            List list = java.util.Arrays.asList(playlists);
            send((char)6, (char)list.indexOf(cmd));
            currentPlaylist = cmd;
        }
    }
    
    private void ratingAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratingAction
        JPopupMenu popup = new JPopupMenu();
        JRadioButtonMenuItem menuItem;
        ButtonGroup group = new ButtonGroup();
         
        String[] titles  = new String[] {"None", "\u00BD", "\u2605", "\u2605\u00BD", "\u2605\u2605", "\u2605\u2605\u00BD", "\u2605\u2605\u2605", "\u2605\u2605\u2605\u00BD", "\u2605\u2605\u2605\u2605", "\u2605\u2605\u2605\u2605\u00BD", "\u2605\u2605\u2605\u2605\u2605"};
        
        for(int i = 0; i < titles.length; i++) {
            menuItem = new JRadioButtonMenuItem(titles[i]);
            menuItem.addActionListener(this);
            popup.add(menuItem);
            if (rating / 10 == i)
                menuItem.setSelected(true);
            group.add(menuItem);            
        }   
        
        popup.show(ratingButton, 0, 0);
    }//GEN-LAST:event_ratingAction

    private void itunesAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itunesAction
        send((char)1, (char)0);
    }//GEN-LAST:event_itunesAction
    
    private void refreshAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshAction
        send((char)0, (char)0);
    }//GEN-LAST:event_refreshAction
    
    private void nextAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextAction
        send((char)2, (char)0);
    }//GEN-LAST:event_nextAction
    
    private void playpauseAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playpauseAction
        send((char)4, (char)0);
    }//GEN-LAST:event_playpauseAction
    
    private void prevAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevAction
        send((char)3, (char)0);
    }//GEN-LAST:event_prevAction

    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
        System.exit(1);
    }//GEN-LAST:event_closeDialog
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        //hide();
        setVisible(false);
        dispose();
    }
    
    // Variablendeklaration - nicht modifizieren//GEN-BEGIN:variables
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JButton itunesButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton playlistsButton;
    private javax.swing.JButton playpauseButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton ratingButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton settingsButton;
    private javax.swing.JButton volumeButton;
    // Ende der Variablendeklaration//GEN-END:variables
    
    private int returnStatus = RET_CANCEL;
    
    String name, artist, album, genre, currentPlaylist;
    Object[] playlists;
    int year, rating, shuffle, repeat, volume, playerState = 666;
    
    boolean connected = false;
    Socket socket = null;
    
    public boolean send(char cmd, char data) {
        if (connect()) {
            PrintWriter out;
            try {
                out = new PrintWriter(socket.getOutputStream());
                
                out.print(cmd);
                out.print(data);
                
                out.flush();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            return true;
        } else
            return false;
    }
    
    
    int ByteToInt(byte data[], int offset) {
        return (data[offset]&255)|((data[offset+1]&255)<<8)|((data[offset+2]&255)<<16)|((data[offset+3]&255)<<24);
    }

    
    public boolean connect() {
        if (!connected) {
            try {
                Preferences prefs = Preferences.userNodeForPackage(this.getClass());
                socket = new Socket(prefs.get("ipaddress", "127.0.0.1"), prefs.getInt("port", 60000));
                
                new ListenerThread(socket).start();
                
                connected = true;
            } catch (Exception e) {
                System.out.println("WARNING: couldn't connect!");
            }
        }
        return connected;
    }
    
    public class ListenerThread extends Thread {
        InputStream in;
        Socket so;
        
        public ListenerThread(Socket s) throws IOException {
            in = s.getInputStream();
            
            so = s;
        }
        
        public void run() {
            while (true) {
                try {
                    int  _playerState;
                    
                    int read_offset_header = 0, read_offset_bytes = 0;
                    int pos = 0;
                    
                    //System.out.println("Waiting for header...");
                    
                    // read 8-byte header
                    byte[] header = new byte[8];
                    
                    while (read_offset_header < 8-1) {
                        read_offset_header += in.read(header, read_offset_header, 8 - read_offset_header);
                    }
                    //System.out.println("Got header...: " + header[0] + " " + header[1] + " " + header[2] + " " + header[3] + " " + header[4] + " " + header[5] + " " + header[6] + " " + header[7] + " ");
                    
                    // check magic byte
                    if (ByteToInt(header, 0) != 666) {
                        // be angry cause magic byte doesn't match
                        System.out.println("ERROR: no magic byte!");
                    }
                    
                    // check remaining bytes
                    int bytes_needed = ByteToInt(header, 4);
                    //System.out.println(bytes_needed + " Bytes needed, waiting...");
                    
                    // read remaining bytes
                    byte[] bytes = new byte[bytes_needed];
                    
                    while (read_offset_bytes < bytes_needed-1) {
                        read_offset_bytes += in.read(bytes, read_offset_bytes, bytes_needed - read_offset_bytes);
                    }
                    //System.out.println("Got payload...");
                    
                    _playerState = 0; name = ""; artist = ""; album = ""; year = 0; genre = "";
                    while (pos < bytes_needed) {
                        try {
                            int length = bytes[pos];
                            pos += 1;
                            
                            String str = new String(bytes, pos, length);
                            pos += length;
                            
                            
                            //System.out.println("Reading: " + str);
                            
                            if (str.equalsIgnoreCase("Album")) {
                                length = bytes[pos];
                                pos += 1;
                                
                                str = new String(bytes, pos, length, "UTF-8");
                                pos += length;
                                album = str;
                            } else if (str.equalsIgnoreCase("Artist")) {
                                length = bytes[pos];
                                pos += 1;
                                
                                str = new String(bytes, pos, length, "UTF-8");
                                pos += length;
                                artist = str;
                            } else if (str.equalsIgnoreCase("Name")) {
                                length = bytes[pos];
                                pos += 1;
                                
                                str = new String(bytes, pos, length, "UTF-8");
                                pos += length;
                                name = str;
                            } else if (str.equalsIgnoreCase("Genre")) {
                                length = bytes[pos];
                                pos += 1;
                                
                                str = new String(bytes, pos, length, "UTF-8");
                                pos += length;
                                genre = str;
                            } else if (str.equalsIgnoreCase("Current Playlist")) {
                                length = bytes[pos];
                                pos += 1;
                                
                                str = new String(bytes, pos, length, "UTF-8");
                                pos += length;
                                currentPlaylist = str;
                            } else if (str.equalsIgnoreCase("Playlists")) {
                                length = ByteToInt(bytes, pos);
                                int currpos = pos;
                                pos += 4;
                                ArrayList _playlists = new ArrayList();
                                _playlists.add("Library");
                                while (pos - currpos < length)
                                {
                                    int len = bytes[pos];
                                    pos += 1;
                                    
                                    _playlists.add(new String(bytes, pos, len, "UTF-8")); 
                                    
                                    pos += len;
                                }
                                playlists = _playlists.toArray();
                            } else if (str.equalsIgnoreCase("Rating")) {
                                rating = ByteToInt(bytes, pos);
                                pos += 4;
                            } else if (str.equalsIgnoreCase("Repeat")) {
                                repeat = ByteToInt(bytes, pos);
                                pos += 4;
                            } else if (str.equalsIgnoreCase("Shuffle")) {
                                shuffle = ByteToInt(bytes, pos);
                                pos += 4;
                            } else if (str.equalsIgnoreCase("Player State")) {
                                _playerState = ByteToInt(bytes, pos);
                                pos += 4;
                                //System.out.println("Got PlayerState: " + _playerState);
                            } else if (str.equalsIgnoreCase("Volume")) {
                                volume = ByteToInt(bytes, pos);
                                pos += 4;
                            } else if (str.equalsIgnoreCase("Year")) {
                                year = ByteToInt(bytes, pos);
                                pos += 4;
                            } else if (str.equalsIgnoreCase("Rating")) {
                                rating = ByteToInt(bytes, pos);
                                pos += 4;
                            }
                        }finally {
                        }
                    }
                    
                    if (_playerState != playerState) {
                        playerState = _playerState;
                        updateInfo(true);
                    } else
                        updateInfo(false);
                    
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
        
        public void updateInfo(boolean stateChanged) {
            //System.out.println("Doin Update: " + stateChanged);
            
            if (playerState == 0) {
                infoTextArea.setText("iTunes is not running!");
                
                if (stateChanged) {
                    playpauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/media-playback-start.png")));
                    
                    itunesButton.setSelected(false);
                    playpauseButton.setEnabled(false);
                    nextButton.setEnabled(false);
                    previousButton.setEnabled(false);
                    
                    ratingButton.setEnabled(false);
                    playlistsButton.setEnabled(false);
                    settingsButton.setEnabled(false);
                    volumeButton.setEnabled(false);
                }
            } else {
                if ((playerState == 3) || (playerState == 2)) {
                    infoTextArea.setText("Title:" + "\t" + name + System.getProperty("line.separator") +
                            "Artist:" + "\t" + artist +  System.getProperty("line.separator") +
                            "Album:" + "\t" + album + System.getProperty("line.separator") +
                            "Year:" + "\t" + year + System.getProperty("line.separator") +
                            "Genre:" + "\t" + genre);
                } else if (playerState == 1)
                    infoTextArea.setText("iTunes is Stopped");
                
                if (stateChanged) {
                    if (playerState == 3)
                        playpauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/media-playback-pause.png")));
                    else if ((playerState == 1) || (playerState == 2))
                        playpauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tunescontroller/icons/media-playback-start.png")));
                    
                    itunesButton.setSelected(true);   
                    playpauseButton.setEnabled(true);
                    nextButton.setEnabled(true);
                    previousButton.setEnabled(true);
                    
                    ratingButton.setEnabled(true);
                    playlistsButton.setEnabled(true);
                    settingsButton.setEnabled(true);
                    volumeButton.setEnabled(true);                    
                }
            }
        }
    }
}